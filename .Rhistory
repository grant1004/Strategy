start_date = "2021-01-01"
end_date = Sys.Date()
main( stock_id, start_date, end_date ); main2( stock_id, start_date, end_date )
stock_id = "2357"
start_date = "2021-01-01"
end_date = Sys.Date()
main( stock_id, start_date, end_date ); main2( stock_id, start_date, end_date )
stock_id = "2357"
start_date = "2021-01-01"
end_date = Sys.Date()
main( stock_id, start_date, end_date )
wkDir = "E:\\Desktop\\Strategy"
setwd(wkDir)
dataDir = wkDir
GetUseTimes <- function(){
# 登入 取得api token
tryCatch( {
url = 'https://api.finmindtrade.com/api/v4/login'
response = httr::POST(
url = url,
body = list(
user_id="Ikjoy1004",
password= "Ikjoy-891004"
)
)
data = content(response)
token = as.character(data$token) ;
url = "https://api.web.finmindtrade.com/v2/user_info"
response = httr::GET(
url = url,
query = list(
token = token # 參考登入，獲取金鑰
)
)
data = content(response)
return( data$user_count )
},
error = function(e) {
#error
print( e )
}
) # try catch
}
GetStockInfo <- function( stock_id, start_time, end_Time ) {
# 登入 取得api token
tryCatch( {
url = 'https://api.finmindtrade.com/api/v4/login'
response = httr::POST(
url = url,
body = list(
user_id="Ikjoy1004",
password= "Ikjoy-891004"
)
)
data = content(response)
token = as.character(data$token) ;
},
error = function(e) {
#error
print( e )
}
) # try catch
# 抓取股票資料
tryCatch( {
url = 'https://api.finmindtrade.com/api/v4/data'
response = httr::GET(
url = url,
query = list(
dataset="TaiwanStockPrice",
data_id= stock_id,
start_date= start_time,
end_date= end_Time,
token = token # 參考登入，獲取金鑰
)
)
data = content(response)
df = data$data %>% do.call('rbind',.) %>% data.table
return( df )
},
error = function(e) {
#error
print( e )
}
) # try catch
} # GetStockInfo http.request取得股票日線內容
CalMonthData <- function( stockInfo, start_month, end_month ) {
df <- data.frame (
date = as.Date("2023-08-01"),
stock_id = "",
open = 0,
max = 0,
min = 0,
close = 0,
Trading_Volume = 0,
Trading_money = 0
)
df <- subset(df, row.names(df) != 1 );
while( start_month <= end_month )
{
# print( start_month )
year = year( start_month )
month = month( start_month )
stockID = stockInfo$stock_id[1]
open = stockInfo[ stockInfo$date == min( stockInfo[ year(stockInfo$date) == year & month(stockInfo$date) == month, ]$date)]$open #; print( open )
max = max( stockInfo[ year(stockInfo$date) == year & month(stockInfo$date) == month, ]$max) #; print( max )
min = min( stockInfo[ year(stockInfo$date) == year & month(stockInfo$date) == month, ]$min) #; print( min )
close = stockInfo[ stockInfo$date == max( stockInfo[ year(stockInfo$date) == year & month(stockInfo$date) == month, ]$date)]$close #; print( close )
Volume = sum( stockInfo[ year(stockInfo$date) == year & month(stockInfo$date) == month, ]$Trading_Volume) #; print( Volume )
Money = sum( stockInfo[ year(stockInfo$date) == year & month(stockInfo$date) == month, ]$Trading_money) #; print( Money )
k_data <- data.frame(
date = as.Date(start_month),
stock_id = stockID,
open = open,
max = max,
min = min,
close = close,
Trading_Volume = Volume,
Trading_money = Money
)
df <- rbind(df, k_data)
start_month <- start_month + months(1)
} # while
return( df )
} # CalMonthData 將日線轉成月線內容
DrawKPicture <- function( Month.df ) {
library(ggplot2)
# 繪製K線圖
ggplot(data = Month.df, aes(x = date)) +
geom_segment(aes(xend = date, y = open, yend = close),
color = ifelse(Month.df$close >= Month.df$open, "red", "green"), linewidth = 1) +
geom_segment(aes(xend = date, y = max, yend = min),
color = ifelse(Month.df$close >= Month.df$open, "red", "green"), linewidth = 0.5) +
labs(title = "K線圖", x = "日期", y = "價格") +
theme_minimal()
} # 繪製K線圖
#### main
main <- function( stock_id, start_date, end_date ){
##### 1. 抓取 StockInfo 指定 ID, 開始日期, 結束日期 ####
stockInfo = GetStockInfo( stock_id, start_date, end_date)
# print( head( stockInfo, 3 ) )
##### 2. 資料清洗、輸出json檔案 #####
stockInfo$date = as.Date(unlist(stockInfo$date))
stockInfo$stock_id = unlist(stockInfo$stock_id)
stockInfo$Trading_Volume = as.numeric(unlist(stockInfo$Trading_Volume))
stockInfo$Trading_money = as.numeric(unlist(stockInfo$Trading_money))
stockInfo$open = as.numeric(unlist(stockInfo$open))
stockInfo$max = as.numeric(unlist(stockInfo$max))
stockInfo$min = as.numeric(unlist(stockInfo$min))
stockInfo$close = as.numeric(unlist(stockInfo$close))
stockInfo$spread = as.numeric(unlist(stockInfo$spread))
stockInfo$Trading_turnover = as.numeric(unlist(stockInfo$Trading_turnover))
fileName = paste( "日線/",stockInfo[1]$stock_id, ".json", sep = "" );  # fileName = {stock_id}.json
json_content <- toJSON(list(data = stockInfo), dataframe = "rows", pretty = TRUE)
write(json_content, file = fileName)
# head( stockInfo )
if ( nrow( stockInfo[ stockInfo$min == 0 ]) != 0)
{
stockInfo <- filter( stockInfo, min != 0 )
}
##### 3. 繪製輸出月線資料 ####
# 設定日期為索引
setDT( stockInfo, key="date" )
start_month = floor_date(min( stockInfo$date), unit="month")
end_month = floor_date(max( stockInfo$date), unit="month")
Month.df = CalMonthData( stockInfo, start_month, end_month )
fileName = paste( "月線/", stockInfo[1]$stock_id, "_month", ".json", sep = "" ); # fileName = {stock_id}_month.json
json_content <- toJSON(list(data = Month.df), dataframe = "rows", pretty = TRUE)
write(json_content, file = fileName)
# DrawKPicture( Month.df )
} # main
#### main2
main2 <- function( stock_id, start_date, end_date ){
##### 1. 抓取 StockInfo 指定 ID, 開始日期, 結束日期 ####
stockInfo <- fromJSON(paste( "日線/", stock_id, ".json", sep="" ))
stockInfo <- as.data.frame( stockInfo$data )
# print( head( stockInfo, 3 ) )
##### 2. 資料清洗、輸出json檔案 #####
stockInfo$date = as.Date(unlist(stockInfo$date))
stockInfo$stock_id = unlist(stockInfo$stock_id)
stockInfo$Trading_Volume = as.numeric(unlist(stockInfo$Trading_Volume))
stockInfo$Trading_money = as.numeric(unlist(stockInfo$Trading_money))
stockInfo$open = as.numeric(unlist(stockInfo$open))
stockInfo$max = as.numeric(unlist(stockInfo$max))
stockInfo$min = as.numeric(unlist(stockInfo$min))
stockInfo$close = as.numeric(unlist(stockInfo$close))
stockInfo$spread = as.numeric(unlist(stockInfo$spread))
stockInfo$Trading_turnover = as.numeric(unlist(stockInfo$Trading_turnover))
# head( stockInfo )
if ( nrow( stockInfo[ stockInfo$min == 0, ]) != 0)
{
stockInfo <- filter( stockInfo, min != 0 )
}
##### 3. 繪製輸出月線資料 ####
# 設定日期為索引
setDT( stockInfo, key="date" )
start_month = floor_date(min( stockInfo$date), unit="month")
end_month = floor_date(max( stockInfo$date), unit="month")
Month.df = CalMonthData( stockInfo, start_month, end_month )
folder_path <- paste( "月線/", year( start_date ), sep = "" )
# print( folder_path  )
if (!file.exists(folder_path)) {
dir.create(folder_path)
}
fileName = paste( folder_path, "/", stockInfo[1]$stock_id, "_", year( start_date ), ".json", sep = "" ); # fileName = {stock_id}_month.json
json_content <- toJSON(list(data = Month.df), dataframe = "rows", pretty = TRUE)
write(json_content, file = fileName)
# DrawKPicture( Month.df )
} # main
stock_id = "2357"
start_date = "2021-01-01"
end_date = Sys.Date()
main( stock_id, start_date, end_date )
setwd(wkDir)
dataDir = wkDir
if (!file.exists("日線")) {
dir.create(folder_path)
}
wkDir = "E:\\Desktop\\Strategy"
setwd(wkDir)
dataDir = wkDir
if (!file.exists("日線")) {
dir.create("日線")
}
if (!file.exists("月線")) {
dir.create("月線")
}
stock_id = "2357"
start_date = "2021-01-01"
end_date = Sys.Date()
main( stock_id, start_date, end_date )
main2( stock_id, start_date, end_date )
stockId_list_path = '台股上市櫃普通股.csv'
stock_id_list = read.csv( stockId_list_path, header = TRUE, sep = ',', fileEncoding = "utf-8" )
# 定義每次處理的行數
chunk_size <- 600
total_rows <- nrow(stock_id_list)
pause_time <- 60 * 80  # 60 seconds/minute * 80 minutes = 4800 seconds
# 迴圈分批處理資料
for (start_row in seq(1, total_rows, by = chunk_size)) {
end_row <- min(start_row + chunk_size - 1, total_rows)
# 取得這一塊的資料
chunk <- stock_id_list[start_row:end_row, ]
# 將這塊資料轉成另一個資料框
chunk_df <- as.data.frame(chunk)
# 分析這一塊的資料
apply(chunk_df, 1, function(x) {
print(x)
tryCatch({
main2(x[1], start_date, end_date)
},
error = function(e) {
print(e)
})
})
# 暫停，除了最後一塊
if (end_row < total_rows) {
print("休息一段時間...")
Sys.sleep(pause_time)
}
}
stock_id = "2357"
start_date = "2021-01-01"
end_date = Sys.Date()
main( stock_id, start_date, end_date )
main2( stock_id, start_date, end_date )
# 迴圈分批處理資料
for (start_row in seq(1, total_rows, by = chunk_size)) {
end_row <- min(start_row + chunk_size - 1, total_rows)
# 取得這一塊的資料
chunk <- stock_id_list[start_row:end_row, ]
# 將這塊資料轉成另一個資料框
chunk_df <- as.data.frame(chunk)
# 分析這一塊的資料
apply(chunk_df, 1, function(x) {
print(x)
tryCatch({
main(x[1], start_date, end_date)
},
error = function(e) {
print(e)
})
})
# 暫停，除了最後一塊
if (end_row < total_rows) {
print("休息一段時間...")
Sys.sleep(pause_time)
}
}
library(jsonlite)
library(dplyr)
library(lubridate)
library(data.table)
library(httr)
library(jsonlite) # install.packages("jsonlite")
wkDir = "E:\\Desktop\\Strategy"
setwd(wkDir)
dataDir = wkDir
if (!file.exists("日線")) {
dir.create("日線")
}
if (!file.exists("月線")) {
dir.create("月線")
}
GetUseTimes <- function(){
# 登入 取得api token
tryCatch( {
url = 'https://api.finmindtrade.com/api/v4/login'
response = httr::POST(
url = url,
body = list(
user_id="Ikjoy1004",
password= "Ikjoy-891004"
)
)
data = content(response)
token = as.character(data$token) ;
url = "https://api.web.finmindtrade.com/v2/user_info"
response = httr::GET(
url = url,
query = list(
token = token # 參考登入，獲取金鑰
)
)
data = content(response)
return( data$user_count )
},
error = function(e) {
#error
print( e )
}
) # try catch
}
GetStockInfo <- function( stock_id, start_time, end_Time ) {
# 登入 取得api token
tryCatch( {
url = 'https://api.finmindtrade.com/api/v4/login'
response = httr::POST(
url = url,
body = list(
user_id="Ikjoy1004",
password= "Ikjoy-891004"
)
)
data = content(response)
token = as.character(data$token) ;
},
error = function(e) {
#error
print( e )
}
) # try catch
# 抓取股票資料
tryCatch( {
url = 'https://api.finmindtrade.com/api/v4/data'
response = httr::GET(
url = url,
query = list(
dataset="TaiwanStockPrice",
data_id= stock_id,
start_date= start_time,
end_date= end_Time,
token = token # 參考登入，獲取金鑰
)
)
data = content(response)
df = data$data %>% do.call('rbind',.) %>% data.table
return( df )
},
error = function(e) {
#error
print( e )
}
) # try catch
} # GetStockInfo http.request取得股票日線內容
CalMonthData <- function( stockInfo, start_month, end_month ) {
df <- data.frame (
date = as.Date("2023-08-01"),
stock_id = "",
open = 0,
max = 0,
min = 0,
close = 0,
Trading_Volume = 0,
Trading_money = 0
)
df <- subset(df, row.names(df) != 1 );
while( start_month <= end_month )
{
# print( start_month )
year = year( start_month )
month = month( start_month )
stockID = stockInfo$stock_id[1]
open = stockInfo[ stockInfo$date == min( stockInfo[ year(stockInfo$date) == year & month(stockInfo$date) == month, ]$date)]$open #; print( open )
max = max( stockInfo[ year(stockInfo$date) == year & month(stockInfo$date) == month, ]$max) #; print( max )
min = min( stockInfo[ year(stockInfo$date) == year & month(stockInfo$date) == month, ]$min) #; print( min )
close = stockInfo[ stockInfo$date == max( stockInfo[ year(stockInfo$date) == year & month(stockInfo$date) == month, ]$date)]$close #; print( close )
Volume = sum( stockInfo[ year(stockInfo$date) == year & month(stockInfo$date) == month, ]$Trading_Volume) #; print( Volume )
Money = sum( stockInfo[ year(stockInfo$date) == year & month(stockInfo$date) == month, ]$Trading_money) #; print( Money )
k_data <- data.frame(
date = as.Date(start_month),
stock_id = stockID,
open = open,
max = max,
min = min,
close = close,
Trading_Volume = Volume,
Trading_money = Money
)
df <- rbind(df, k_data)
start_month <- start_month + months(1)
} # while
return( df )
} # CalMonthData 將日線轉成月線內容
DrawKPicture <- function( Month.df ) {
library(ggplot2)
# 繪製K線圖
ggplot(data = Month.df, aes(x = date)) +
geom_segment(aes(xend = date, y = open, yend = close),
color = ifelse(Month.df$close >= Month.df$open, "red", "green"), linewidth = 1) +
geom_segment(aes(xend = date, y = max, yend = min),
color = ifelse(Month.df$close >= Month.df$open, "red", "green"), linewidth = 0.5) +
labs(title = "K線圖", x = "日期", y = "價格") +
theme_minimal()
} # 繪製K線圖
#### main vs main2 差異
#    main 將資料存在"月線"資料夾
#    main2 將資料存在"月線/start_date"資料夾
#    其他都相同
#### main
main <- function( stock_id, start_date, end_date ){
##### 1. 抓取 StockInfo 指定 ID, 開始日期, 結束日期 ####
stockInfo = GetStockInfo( stock_id, start_date, end_date)
# print( head( stockInfo, 3 ) )
##### 2. 資料清洗、輸出json檔案 #####
stockInfo$date = as.Date(unlist(stockInfo$date))
stockInfo$stock_id = unlist(stockInfo$stock_id)
stockInfo$Trading_Volume = as.numeric(unlist(stockInfo$Trading_Volume))
stockInfo$Trading_money = as.numeric(unlist(stockInfo$Trading_money))
stockInfo$open = as.numeric(unlist(stockInfo$open))
stockInfo$max = as.numeric(unlist(stockInfo$max))
stockInfo$min = as.numeric(unlist(stockInfo$min))
stockInfo$close = as.numeric(unlist(stockInfo$close))
stockInfo$spread = as.numeric(unlist(stockInfo$spread))
stockInfo$Trading_turnover = as.numeric(unlist(stockInfo$Trading_turnover))
fileName = paste( "日線/",stockInfo[1]$stock_id, ".json", sep = "" );  # fileName = {stock_id}.json
json_content <- toJSON(list(data = stockInfo), dataframe = "rows", pretty = TRUE)
write(json_content, file = fileName)
# head( stockInfo )
if ( nrow( stockInfo[ stockInfo$min == 0 ]) != 0)
{
stockInfo <- filter( stockInfo, min != 0 )
}
##### 3. 繪製輸出月線資料 ####
# 設定日期為索引
setDT( stockInfo, key="date" )
start_month = floor_date(min( stockInfo$date), unit="month")
end_month = floor_date(max( stockInfo$date), unit="month")
Month.df = CalMonthData( stockInfo, start_month, end_month )
fileName = paste( "月線/", stockInfo[1]$stock_id, "_month", ".json", sep = "" ); # fileName = {stock_id}_month.json
json_content <- toJSON(list(data = Month.df), dataframe = "rows", pretty = TRUE)
write(json_content, file = fileName)
# DrawKPicture( Month.df )
} # main
#### main2
main2 <- function( stock_id, start_date, end_date ){
##### 1. 抓取 StockInfo 指定 ID, 開始日期, 結束日期 ####
stockInfo <- fromJSON(paste( "日線/", stock_id, ".json", sep="" ))
stockInfo <- as.data.frame( stockInfo$data )
# print( head( stockInfo, 3 ) )
##### 2. 資料清洗、輸出json檔案 #####
stockInfo$date = as.Date(unlist(stockInfo$date))
stockInfo$stock_id = unlist(stockInfo$stock_id)
stockInfo$Trading_Volume = as.numeric(unlist(stockInfo$Trading_Volume))
stockInfo$Trading_money = as.numeric(unlist(stockInfo$Trading_money))
stockInfo$open = as.numeric(unlist(stockInfo$open))
stockInfo$max = as.numeric(unlist(stockInfo$max))
stockInfo$min = as.numeric(unlist(stockInfo$min))
stockInfo$close = as.numeric(unlist(stockInfo$close))
stockInfo$spread = as.numeric(unlist(stockInfo$spread))
stockInfo$Trading_turnover = as.numeric(unlist(stockInfo$Trading_turnover))
# head( stockInfo )
if ( nrow( stockInfo[ stockInfo$min == 0, ]) != 0)
{
stockInfo <- filter( stockInfo, min != 0 )
}
##### 3. 繪製輸出月線資料 ####
# 設定日期為索引
setDT( stockInfo, key="date" )
start_month = floor_date(min( stockInfo$date), unit="month")
end_month = floor_date(max( stockInfo$date), unit="month")
Month.df = CalMonthData( stockInfo, start_month, end_month )
folder_path <- paste( "月線/", year( start_date ), sep = "" )
# print( folder_path  )
if (!file.exists(folder_path)) {
dir.create(folder_path)
}
fileName = paste( folder_path, "/", stockInfo[1]$stock_id, "_", year( start_date ), ".json", sep = "" ); # fileName = {stock_id}_month.json
json_content <- toJSON(list(data = Month.df), dataframe = "rows", pretty = TRUE)
write(json_content, file = fileName)
# DrawKPicture( Month.df )
} # main
stock_id = "2357"
start_date = "2024-01-01"
end_date = Sys.Date()
main( stock_id, start_date, end_date )
main2( stock_id, start_date, end_date )
stockId_list_path = '台股上市櫃普通股.csv'
stock_id_list = read.csv( stockId_list_path, header = TRUE, sep = ',', fileEncoding = "utf-8" )
# 定義每次處理的行數
chunk_size <- 600
total_rows <- nrow(stock_id_list)
pause_time <- 60 * 80  # 60 seconds/minute * 80 minutes = 4800 seconds
